#!/bin/bash

# Colors
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
CYAN='\033[1;36m'
PURPLE='\033[1;35m'
RESET='\033[0m'

# Default favorite file
FAVORITE_FILE="favorite.txt"

# Function to add a coin to favorites
add_favorite() {
    for symbol in "$@"; do
        echo "$symbol" >> "$FAVORITE_FILE"
        echo "Added $symbol to favorites."
    done
}

# Function to remove a coin from favorites
remove_favorite() {
    for symbol in "$@"; do
        sed -i "/^$symbol\$/d" "$FAVORITE_FILE"
        echo "Removed $symbol from favorites."
    done
}

# Function to show the list of favorite coins
show_favorite() {
    if [ -s "$FAVORITE_FILE" ]; then
        echo -e "${CYAN}Favorite coins:${RESET}"
        while IFS= read -r symbol; do
            fetch_prices "$symbol"
            echo ""
        done <"$FAVORITE_FILE"
    else
        echo "No favorite coins added."
    fi
}

# Function to show the list of favorite coins
show_list() {
    if [ -s "$FAVORITE_FILE" ]; then
        echo -e "${CYAN}Favorite coins:${RESET}"
        cat "$FAVORITE_FILE"
    else
        echo "No favorite coins added."
    fi
}

# Function to fetch cryptocurrency prices
fetch_prices() {
    # Check if any symbol is provided as an argument
    if [ $# -eq 0 ]; then
        echo -e "${RED}Error: No coin symbol provided.${RESET}"
        exit 1
    fi

echo -e "
\e[38;2;249;99;94m\e[97m      :::::::::  :::::::::               ::::::::  :::            :::     :::::::::  :::    ::: \e[0m
\e[38;2;249;99;94m\e[97m     :+:    :+: :+:    :+:             :+:    :+: :+:          :+: :+:   :+:    :+: :+:   :+:   \e[0m
\e[38;2;249;99;94m\e[97m    +:+    +:+ +:+    +:+             +:+        +:+         +:+   +:+  +:+    +:+ +:+  +:+    \e[0m
\e[38;2;249;99;94m\e[97m   +#+    +:+ +#++:++#:              +#+        +#+        +#++:++#++: +#+ +:+ +#+ +#+ +#+     \e[0m
\e[38;2;249;99;94m\e[97m  +#+    +#+ +#+    +#+             +#+        +#+        +#+     +#+ +#+  +#+#+# +#+  +#+    \e[0m
\e[38;2;249;99;94m\e[97m #+#    #+# #+#    #+# #+#         #+#    #+# #+#        #+#     #+# #+#   #+#+# #+#   #+#   \e[0m
\e[38;2;249;99;94m\e[97m#########  ###    ### ###          ########  ########## ###     ### ###    ### ###    ### \e[0m

\e[38;2;249;99;94m\e[97m                   SEE THE FUTURE FROM YOUR TERMINAL! - by klaw                                 \e[0m
"



    # Fetch data from the API
    data=$(curl -s "https://api.coinlore.net/api/tickers/")

    # Check if data retrieval was successful
    if [ -z "$data" ]; then
        echo -e "${RED}Error fetching data from the API.${RESET}"
        exit 1
    fi

    # Loop through provided symbols
    for symbol in "$@"; do
        # Search for the symbol in the API data
        coin_data=$(echo "$data" | jq -r ".data[] | select(.symbol == \"$symbol\")")

        # Check if the symbol exists in the data
        if [ -z "$coin_data" ]; then
            echo -e "${YELLOW}Data not available for $symbol.${RESET}"
            continue
        fi

        # Extract data for the symbol
        price_usd=$(echo "$coin_data" | jq -r ".price_usd" | sed 's/\./,/')
        percent_change_24h=$(echo "$coin_data" | jq -r ".percent_change_24h" | sed 's/\./,/')
        percent_change_1h=$(echo "$coin_data" | jq -r ".percent_change_1h" | sed 's/\./,/')
        percent_change_7d=$(echo "$coin_data" | jq -r ".percent_change_7d" | sed 's/\./,/')
        market_cap_usd=$(echo "$coin_data" | jq -r ".market_cap_usd" | sed 's/\./,/')
        volume24=$(echo "$coin_data" | jq -r ".volume24" | sed 's/\./,/')
        volume24a=$(echo "$coin_data" | jq -r ".volume24a" | sed 's/\./,/')
        csupply=$(echo "$coin_data" | jq -r ".csupply" | sed 's/\./,/')
        tsupply=$(echo "$coin_data" | jq -r ".tsupply" | sed 's/\./,/')
        msupply=$(echo "$coin_data" | jq -r ".msupply" | sed 's/\./,/')

        # Redirect potential syntax errors from bc to error log
        printf "%s\n" "$percent_change_24h" | bc -l 2>>error.log
        printf "%s\n" "$percent_change_1h" | bc -l 2>>error.log
        printf "%s\n" "$percent_change_7d" | bc -l 2>>error.log

        # Check if the retrieved values are valid numbers
        if [ -z "$price_usd" ] || [ -z "$percent_change_24h" ] || [ -z "$percent_change_1h" ] || [ -z "$percent_change_7d" ]; then
            echo -e "${RED}Error: Invalid data for $symbol.${RESET}"
            continue
        fi

        # Display cryptocurrency symbol
        echo -e "${CYAN}Price data for $symbol:${RESET}"

        # Display price in USD with color
        if (( $(echo "$percent_change_24h >= 0" | bc -l) )); then
            price_color=$GREEN
        else
            price_color=$RED
        fi
        printf "${price_color}Price (USD): %.2f${RESET}\n" "$price_usd"

        # Display percent change in 24 hours with color and arrow
        if (( $(echo "$percent_change_24h >= 0" | bc -l) )); then
            change_color=$GREEN
            arrow="▲"
        else
            change_color=$RED
            arrow="▼"
        fi
        printf "${change_color}Percent change (24h): %.2f%%${RESET}${arrow}\n" "$percent_change_24h"

        # Display percent change in 1 hour with color and arrow
        if (( $(echo "$percent_change_1h >= 0" | bc -l) )); then
            change_color=$GREEN
            arrow="▲"
        else
            change_color=$RED
            arrow="▼"
        fi
        printf "${change_color}Percent change (1h): %.2f%%${RESET}${arrow}\n" "$percent_change_1h"

        # Display percent change in 7 days with color and arrow
        if (( $(echo "$percent_change_7d >= 0" | bc -l) )); then
            change_color=$GREEN
            arrow="▲"
        else
            change_color=$RED
            arrow="▼"
        fi
        printf "${change_color}Percent change (7d): %.2f%%${RESET}${arrow}\n" "$percent_change_7d"

        # Display additional information
        echo -e ""
        echo -e "${YELLOW}Market Cap (USD): $market_cap_usd${RESET}"
        echo -e "${YELLOW}Volume (24h): $volume24${RESET}"
        echo -e "${YELLOW}Volume (24h average): $volume24a${RESET}"
        echo -e "${YELLOW}Current Supply: $csupply${RESET}"
        echo -e "${YELLOW}Total Supply: $tsupply${RESET}"
        echo -e "${YELLOW}Max Supply: $msupply${RESET}"

        echo -e "${PURPLE}-----------------------------------------------------------------------${RESET}"
    done

    # Check if there are errors in the error.log file and print a message
    if [ -s "error.log" ]; then
        echo -e "${YELLOW}If there are any errors, they are logged in error.log.${RESET}"
    fi
}

# Main function
main() {
    if [ "$1" == "--add-favorite" ]; then
        shift
        add_favorite "$@"
    elif [ "$1" == "--remove-favorite" ]; then
        shift
        remove_favorite "$@"
    elif [ "$1" == "show-favorite" ]; then
        show_favorite
    elif [ "$1" == "favorite-list" ]; then
        show_list
    else
        fetch_prices "$@"
    fi
}

# Call main function with command-line arguments
main "$@"
